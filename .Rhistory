install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
getwd()
setwd("/home/marcos/Documents/CCT College/3 Data Exploration & Preparation/1 Semester/CA1 - 40%")
getwd()
### 2. Data on COVID-19 vaccination in the EU/EEA
# Loading the data and checking the structure of the dataframe
covid19_vaccination_EU_EEA_df <- read.csv("covid19_vaccination_EU_EEA.csv")
library(readr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(scales)
library(reshape2)
library(forcats)
library(ggthemes)
library(plotly)
library(scales)
### 5. Quick look at the dataset in the next tab
View(covid19_vaccination_EU_EEA_df)
### 6. Data Cleaning
##  6.1 Validating Data Types:
# Checking if the dataframe has correct data types
str(covid19_vaccination_EU_EEA_df)
### 10. Line, Scatter and Heatmaps used to show the correlation of the dataset.
## 10.1 Line Plot
# Extract year and week number from YearWeekISO
covid19_vaccination_EU_EEA_df$Week <- as.numeric(gsub(".*W", "", covid19_vaccination_EU_EEA_df$YearWeekISO))
# Aggregate total first doses by week for each country
first_doses_by_country_week <- covid19_vaccination_EU_EEA_df %>%
group_by(ReportingCountry, Week) %>%
summarize(TotalFirstDose = sum(FirstDose, na.rm = TRUE), .groups = 'drop') %>%
arrange(ReportingCountry, Week)
# Using a color palette
color_palette <- viridis::scale_color_viridis(discrete = TRUE, option = "D")
# Line plot for total first doses by week for each country
plot <- ggplot(first_doses_by_country_week, aes(x = Week, y = TotalFirstDose, group = ReportingCountry, color = ReportingCountry)) +
geom_line() +
labs(title = "Total First Doses Administered Over Time by Country", x = "Week", y = "Total First Doses") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(size=2))) +
color_palette
# Convert to an interactive plot using plotly
interactive_plot <- ggplotly(plot)
# Render the interactive plot
interactive_plot
# Directly create a scatter plot using plotly
interactive_scatter_plot <- plot_ly(data = covid19_vaccination_EU_EEA_df, x = ~FirstDose, y = ~SecondDose, type = 'scatter', mode = 'markers') %>%
layout(title = 'Relationship between First and Second Doses Administered',
xaxis = list(title = 'First Dose', type = 'linear'),
yaxis = list(title = 'Second Dose', type = 'linear'))
# Render the interactive scatter plot
interactive_scatter_plot
ggplot(covid19_vaccination_EU_EEA_df, aes(x = FirstDose, y = SecondDose)) +
geom_point(alpha = 0.5) +
labs(title = "Relationship between First and Second Doses Administered", x = "First Dose", y = "Second Dose") +
theme_minimal()
# Directly create a scatter plot using plotly
interactive_scatter_plot <- plot_ly(data = covid19_vaccination_EU_EEA_df, x = ~FirstDose, y = ~SecondDose, type = 'scatter', mode = 'markers') %>%
layout(title = 'Relationship between First and Second Doses Administered',
xaxis = list(title = 'First Dose', type = 'linear'),
yaxis = list(title = 'Second Dose', type = 'linear'))
# Render the interactive scatter plot
interactive_scatter_plot
ggplot(covid19_vaccination_EU_EEA_df, aes(x = FirstDose, y = SecondDose)) +
geom_point(alpha = 0.5) +
labs(title = "Relationship between First and Second Doses Administered", x = "First Dose", y = "Second Dose") +
theme_minimal() +
scale_x_continuous(labels = scales::comma) +  # Format the x-axis labels to be more user-friendly
scale_y_continuous(labels = scales::comma)
## 10.3 Heatmap
# Calculate the correlation matrix
correlation_matrix <- covid19_vaccination_EU_EEA_df %>%
select(all_of(numerical_columns)) %>%
cor(use = "complete.obs")
# Melt the correlation matrix to long format
correlation_matrix_melted <- melt(correlation_matrix, na.rm = TRUE)
ggplot(data = correlation_matrix_melted, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1), space = "Lab", name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1),
axis.text.y = element_text(size = 10)) +
labs(x = '', y = '', title = "Correlation Matrix Heatmap")
# Melt the correlation matrix to long format
correlation_matrix_melted <- melt(correlation_matrix, na.rm = TRUE)
ggplot(data = correlation_matrix_melted, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1), space = "Lab", name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1),
axis.text.y = element_text(size = 10)) +
labs(x = '', y = '', title = "Correlation Matrix Heatmap")
